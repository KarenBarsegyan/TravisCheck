// Generated by gencpp from file fssim_common/SimHealth.msg
// DO NOT EDIT!


#ifndef FSSIM_COMMON_MESSAGE_SIMHEALTH_H
#define FSSIM_COMMON_MESSAGE_SIMHEALTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fssim_common/TopicsHealth.h>

namespace fssim_common
{
template <class ContainerAllocator>
struct SimHealth_
{
  typedef SimHealth_<ContainerAllocator> Type;

  SimHealth_()
    : request_shutdown(false)
    , vehicle_started(false)
    , topics_health()  {
    }
  SimHealth_(const ContainerAllocator& _alloc)
    : request_shutdown(false)
    , vehicle_started(false)
    , topics_health(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _request_shutdown_type;
  _request_shutdown_type request_shutdown;

   typedef uint8_t _vehicle_started_type;
  _vehicle_started_type vehicle_started;

   typedef  ::fssim_common::TopicsHealth_<ContainerAllocator>  _topics_health_type;
  _topics_health_type topics_health;





  typedef boost::shared_ptr< ::fssim_common::SimHealth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fssim_common::SimHealth_<ContainerAllocator> const> ConstPtr;

}; // struct SimHealth_

typedef ::fssim_common::SimHealth_<std::allocator<void> > SimHealth;

typedef boost::shared_ptr< ::fssim_common::SimHealth > SimHealthPtr;
typedef boost::shared_ptr< ::fssim_common::SimHealth const> SimHealthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fssim_common::SimHealth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fssim_common::SimHealth_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fssim_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'fssim_common': ['/home/karenbarsegyan/BRTDriverless/src/fssim/fssim_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::SimHealth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fssim_common::SimHealth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::SimHealth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fssim_common::SimHealth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::SimHealth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fssim_common::SimHealth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fssim_common::SimHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d6de42391271dba371094f7524b84b6";
  }

  static const char* value(const ::fssim_common::SimHealth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d6de42391271dbaULL;
  static const uint64_t static_value2 = 0x371094f7524b84b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::fssim_common::SimHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fssim_common/SimHealth";
  }

  static const char* value(const ::fssim_common::SimHealth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fssim_common::SimHealth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool request_shutdown 	# If TRUE we request immidiate shutdown\n\
bool vehicle_started	# We send res message to start the vehicle	\n\
\n\
TopicsHealth topics_health # List of topics and their health\n\
================================================================================\n\
MSG: fssim_common/TopicsHealth\n\
bool topics_check_passed	# True is all topics passed check\n\
float32 precision			# How much we allow to deviate topics freq from expected\n\
TopicState[] topics_check  	# All topics health\n\
================================================================================\n\
MSG: fssim_common/TopicState\n\
string topic_name\n\
float32 expected_frequency\n\
float32 measured_frequency\n\
bool passed\n\
";
  }

  static const char* value(const ::fssim_common::SimHealth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fssim_common::SimHealth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request_shutdown);
      stream.next(m.vehicle_started);
      stream.next(m.topics_health);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimHealth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fssim_common::SimHealth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fssim_common::SimHealth_<ContainerAllocator>& v)
  {
    s << indent << "request_shutdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request_shutdown);
    s << indent << "vehicle_started: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_started);
    s << indent << "topics_health: ";
    s << std::endl;
    Printer< ::fssim_common::TopicsHealth_<ContainerAllocator> >::stream(s, indent + "  ", v.topics_health);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FSSIM_COMMON_MESSAGE_SIMHEALTH_H
